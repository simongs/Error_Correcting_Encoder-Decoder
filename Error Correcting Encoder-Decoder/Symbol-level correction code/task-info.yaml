type: edu
custom_name: stage2
files:
- name: test/CorrecterTest.java
  visible: false
  text: |
    import correcter.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        public CorrecterTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("Some text to test"),
                new TestClue("send message to user with id #42354"),
                new TestClue("thq")
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            List<String> splitReply = Arrays.asList(reply.strip().split("\\n"));

            if (splitReply.size() != 4) {
                return new CheckResult(false,
                    "Your program should output 4 lines, found: " + splitReply.size());
            }

            String initialLine = splitReply.get(0);
            String stretched = splitReply.get(1);
            String received = splitReply.get(2);
            String decoded = splitReply.get(3);


            if (!initialLine.equals(clue.input)) {
                return new CheckResult(false,
                    "First line of output should be an input reference!");
            }

            if (!stretched.equals(stretchString(initialLine))) {
                return new CheckResult(false,
                    "Text before sending is encoded incorrectly!");
            }

            if (!decoded.equals(initialLine)) {
                return new CheckResult(false,
                    "Decoding result not match required! Make sure the program works correctly!");
            }

            return checkMatches(received, stretched);
        }

        private static String stretchString(String target) {
            char[] resultChars = target.toCharArray();
            char[] result = new char[resultChars.length * 3];
            for (int i = 0; i < result.length; i++) {
                result[i] = resultChars[i / 3];
            }

            return new String(result);
        }

        private CheckResult checkMatches(String userOutput,
                                         String correctOutput) {

            if (userOutput.length() != correctOutput.length()) {
                return new CheckResult(false,
                    "Input length and output length should be the same!\n" +
                        "Input length: " + correctOutput.length() +
                        "Output length: " + userOutput.length());
            }

            for (int i = 0; i < userOutput.length(); i+=3) {

                int from = i;
                int to = Math.min(i+3, userOutput.length());

                String currUserPart = userOutput.substring(from, to);
                String currCorrectPart = correctOutput.substring(from, to);

                if (currUserPart.length() != 3) {
                    break;
                }

                int errors = 0;

                for (int j = 0; j < currUserPart.length(); j++) {
                    if (currUserPart.charAt(j) != currCorrectPart.charAt(j)) {
                        errors++;
                    }
                }

                if (errors != 1) {
                    return new CheckResult(false,
                        "One of the triples contain "
                            + errors + " errors, but every triple should always contain 1 error");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/correcter/Main.java
  visible: true
  text: |
    package correcter;

    import java.util.Random;
    import java.util.Scanner;

    public class Main {
        public static final String ALPHANUMERIC_CHARACTERS = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ";

        private static final Random random = new Random();

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            char[] input = scanner.nextLine().toCharArray();

            for (int i = 0; i < input.length; i += 3) {
                int range = random.nextInt(Math.min(3, input.length - i));

                input[i + range] = getRandomAlphaNum();
            }

            System.out.println(input);

        }

        public void test() {
            String next = "";

            int loopCount = (next.length() / 3) + 1;
            if (next.length() % 3 == 0) {
                loopCount--;
            }

            // 단어를 3개씩 나누는 방법
            // String[] parts = line.split("(?<=\\G.{3})");

            StringBuilder builder = new StringBuilder();

            for (int i = 0; i < loopCount; i++) {
                int startIndex = i * 3;
                int endIndex = (i+1) * 3;

                if (endIndex > next.length()) {
                    builder.append(next.substring(startIndex));
                } else {
                    String substring = next.substring(startIndex, endIndex);
                    String encrypt = encrypt(substring);
                    builder.append(encrypt);
                }

            }

            System.out.println(builder.toString());
        }

        private static String encrypt(String substring) {
            char[] chars = substring.toCharArray();
            chars[random.nextInt(3)] = getRandomAlphaNum();
            return new String(chars);
        }

        private static char getRandomAlphaNum() {
            int randomIndex = random.nextInt(ALPHANUMERIC_CHARACTERS.length());
            char[] chars = ALPHANUMERIC_CHARACTERS.toCharArray();
            return chars[randomIndex];
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/58/stages/313/implement
status: Failed
record: 2
